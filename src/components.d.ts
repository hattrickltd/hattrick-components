/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';


import {
  IAvatarImage,
  IAvatarPart,
} from './components/avatar/avatar';
import {
  EventEmitter,
} from '@stencil/core';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface HattrickAvatar {
      /**
       * Set whether or not the background should be shown. 
       */
      'background': boolean;
      /**
       * the base route to the avatars, can be either a relative or absolute url 
       */
      'base': string;
      /**
       * Set whether or not the surrounding card should be shown. 
       */
      'facecard': boolean;
      /**
       * Set this to false to remove the bandages on injured and bruised players. 
       */
      'injury': boolean;
      /**
       * Set to false to load the avatar directly, as opposed to loading it when it's visible within the viewport 
       */
      'lazy': boolean;
      /**
       * An array (or a JSON formatted string) with the parts that builds up the avatar, or a number to display a silhouette. 
       */
      'parts': IAvatarPart[] | number | string;
      'printToCanvas': (images?: IAvatarImage[]) => HTMLCanvasElement;
      /**
       * Set to true to generate a circular avatar by cutting off the bottom. 
       */
      'round': boolean;
      /**
       * Set to true to generate a square avatar by cutting off the bottom. 
       */
      'square': boolean;
    }

    interface HattrickBar {
      /**
       * If there's a max before the end of the bar (e.g. maxed youth skill). 
       */
      'cap': number;
      /**
       * The denomination of the skill level 
       */
      'denomination': string;
      'hideContent': boolean;
      /**
       * If the sublevel is the same as the levelCap. 
       */
      'isCap': boolean;
      /**
       * The label shown inside the bar 
       */
      'label': string;
      /**
       * Set to false to load the bar directly, as opposed to loading it when it's visible within the viewport 
       */
      'lazy': boolean;
      /**
       * The level of the bar. 
       */
      'level': number;
      /**
       * The maximum level the bar should show. 
       */
      'max': number;
    }

    interface HattrickFlip {
      'direction': "x" | "y";
      'flipped': boolean;
    }

    interface HattrickProgressArc {
      /**
       * Expression evaluating to float [0.0, 1.0] 
       */
      'complete': number;
      /**
       * Indicating if the progress should instead be counter clockwise 
       */
      'counterClockwise': boolean;
      /**
       * Size of element in pixels. 
       */
      'size': number;
      /**
       * Width of progress arc stroke. 
       */
      'strokeWidth': number;
    }

    interface HattrickRating {
      /**
       * The rating to show inside the stamina. 
       */
      'rating': number;
      /**
       * Size of element in pixels. 
       */
      'size': number | "small" | "large";
      /**
       * Stamina in percentage between 0 and 1. 
       */
      'stamina': number;
      /**
       * Label for the mouseover stamina 
       */
      'staminaLabel': string;
    }

    interface HattrickTimer {
      /**
       * The string for `days` which is used if the deadline is more than 72 hours away. 
       */
      'daysText': string;
      /**
       * At what time should the clock reach 00:00:00. 
       */
      'deadline': Date | string | number;
      /**
       * If the timer should start counting upwards again after reaching 0. 
       */
      'keepCounting': boolean;
      /**
       * After how many hours should it start showing _x days_. Change text via the `daysText` property. 
       */
      'maxHours': number;
    }

    interface HattrickTooltip {
      /**
       * The position of the arrow. Will be ignored if `position` is not set. `start` will put the arrow to the left or top. `middle` will put the arrow to the middle or center. `end` will put the arrow to the right or bottom.
       */
      'arrow': "start" | "middle" | "end" | "none";
      /**
       * The content of the title. Can also be set with `slot="content"` to enable HTML in the tooltip. 
       */
      'content': string;
      'dir': string;
      /**
       * Which side of the element the tooltip should be shown. `cursor` will put it approximately below the cursor. Using `cursor` will also disable animations.
       */
      'position': "top" | "bottom" | "start" | "end" | "cursor";
    }
  }


    interface HTMLHattrickAvatarElement extends StencilComponents.HattrickAvatar, HTMLStencilElement {}

    var HTMLHattrickAvatarElement: {
      prototype: HTMLHattrickAvatarElement;
      new (): HTMLHattrickAvatarElement;
    };
    

    interface HTMLHattrickBarElement extends StencilComponents.HattrickBar, HTMLStencilElement {}

    var HTMLHattrickBarElement: {
      prototype: HTMLHattrickBarElement;
      new (): HTMLHattrickBarElement;
    };
    

    interface HTMLHattrickFlipElement extends StencilComponents.HattrickFlip, HTMLStencilElement {}

    var HTMLHattrickFlipElement: {
      prototype: HTMLHattrickFlipElement;
      new (): HTMLHattrickFlipElement;
    };
    

    interface HTMLHattrickProgressArcElement extends StencilComponents.HattrickProgressArc, HTMLStencilElement {}

    var HTMLHattrickProgressArcElement: {
      prototype: HTMLHattrickProgressArcElement;
      new (): HTMLHattrickProgressArcElement;
    };
    

    interface HTMLHattrickRatingElement extends StencilComponents.HattrickRating, HTMLStencilElement {}

    var HTMLHattrickRatingElement: {
      prototype: HTMLHattrickRatingElement;
      new (): HTMLHattrickRatingElement;
    };
    

    interface HTMLHattrickTimerElement extends StencilComponents.HattrickTimer, HTMLStencilElement {}

    var HTMLHattrickTimerElement: {
      prototype: HTMLHattrickTimerElement;
      new (): HTMLHattrickTimerElement;
    };
    

    interface HTMLHattrickTooltipElement extends StencilComponents.HattrickTooltip, HTMLStencilElement {}

    var HTMLHattrickTooltipElement: {
      prototype: HTMLHattrickTooltipElement;
      new (): HTMLHattrickTooltipElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'hattrick-avatar': JSXElements.HattrickAvatarAttributes;
    'hattrick-bar': JSXElements.HattrickBarAttributes;
    'hattrick-flip': JSXElements.HattrickFlipAttributes;
    'hattrick-progress-arc': JSXElements.HattrickProgressArcAttributes;
    'hattrick-rating': JSXElements.HattrickRatingAttributes;
    'hattrick-timer': JSXElements.HattrickTimerAttributes;
    'hattrick-tooltip': JSXElements.HattrickTooltipAttributes;
    }
  }

  namespace JSXElements {

    export interface HattrickAvatarAttributes extends HTMLAttributes {
      /**
       * Set whether or not the background should be shown. 
       */
      'background'?: boolean;
      /**
       * the base route to the avatars, can be either a relative or absolute url 
       */
      'base'?: string;
      /**
       * Set whether or not the surrounding card should be shown. 
       */
      'facecard'?: boolean;
      /**
       * Set this to false to remove the bandages on injured and bruised players. 
       */
      'injury'?: boolean;
      /**
       * Set to false to load the avatar directly, as opposed to loading it when it's visible within the viewport 
       */
      'lazy'?: boolean;
      'onLoad'?: (event: CustomEvent<Array<IAvatarImage>>) => void;
      /**
       * An array (or a JSON formatted string) with the parts that builds up the avatar, or a number to display a silhouette. 
       */
      'parts'?: IAvatarPart[] | number | string;
      /**
       * Set to true to generate a circular avatar by cutting off the bottom. 
       */
      'round'?: boolean;
      /**
       * Set to true to generate a square avatar by cutting off the bottom. 
       */
      'square'?: boolean;
    }

    export interface HattrickBarAttributes extends HTMLAttributes {
      /**
       * If there's a max before the end of the bar (e.g. maxed youth skill). 
       */
      'cap'?: number;
      /**
       * The denomination of the skill level 
       */
      'denomination'?: string;
      'hideContent'?: boolean;
      /**
       * If the sublevel is the same as the levelCap. 
       */
      'isCap'?: boolean;
      /**
       * The label shown inside the bar 
       */
      'label'?: string;
      /**
       * Set to false to load the bar directly, as opposed to loading it when it's visible within the viewport 
       */
      'lazy'?: boolean;
      /**
       * The level of the bar. 
       */
      'level'?: number;
      /**
       * The maximum level the bar should show. 
       */
      'max'?: number;
    }

    export interface HattrickFlipAttributes extends HTMLAttributes {
      'direction'?: "x" | "y";
      'flipped'?: boolean;
    }

    export interface HattrickProgressArcAttributes extends HTMLAttributes {
      /**
       * Expression evaluating to float [0.0, 1.0] 
       */
      'complete'?: number;
      /**
       * Indicating if the progress should instead be counter clockwise 
       */
      'counterClockwise'?: boolean;
      /**
       * Size of element in pixels. 
       */
      'size'?: number;
      /**
       * Width of progress arc stroke. 
       */
      'strokeWidth'?: number;
    }

    export interface HattrickRatingAttributes extends HTMLAttributes {
      /**
       * The rating to show inside the stamina. 
       */
      'rating'?: number;
      /**
       * Size of element in pixels. 
       */
      'size'?: number | "small" | "large";
      /**
       * Stamina in percentage between 0 and 1. 
       */
      'stamina'?: number;
      /**
       * Label for the mouseover stamina 
       */
      'staminaLabel'?: string;
    }

    export interface HattrickTimerAttributes extends HTMLAttributes {
      /**
       * The string for `days` which is used if the deadline is more than 72 hours away. 
       */
      'daysText'?: string;
      /**
       * At what time should the clock reach 00:00:00. 
       */
      'deadline'?: Date | string | number;
      /**
       * If the timer should start counting upwards again after reaching 0. 
       */
      'keepCounting'?: boolean;
      /**
       * After how many hours should it start showing _x days_. Change text via the `daysText` property. 
       */
      'maxHours'?: number;
    }

    export interface HattrickTooltipAttributes extends HTMLAttributes {
      /**
       * The position of the arrow. Will be ignored if `position` is not set. `start` will put the arrow to the left or top. `middle` will put the arrow to the middle or center. `end` will put the arrow to the right or bottom.
       */
      'arrow'?: "start" | "middle" | "end" | "none";
      /**
       * The content of the title. Can also be set with `slot="content"` to enable HTML in the tooltip. 
       */
      'content'?: string;
      'dir'?: string;
      /**
       * Which side of the element the tooltip should be shown. `cursor` will put it approximately below the cursor. Using `cursor` will also disable animations.
       */
      'position'?: "top" | "bottom" | "start" | "end" | "cursor";
    }
  }

  interface HTMLElementTagNameMap {
    'hattrick-avatar': HTMLHattrickAvatarElement
    'hattrick-bar': HTMLHattrickBarElement
    'hattrick-flip': HTMLHattrickFlipElement
    'hattrick-progress-arc': HTMLHattrickProgressArcElement
    'hattrick-rating': HTMLHattrickRatingElement
    'hattrick-timer': HTMLHattrickTimerElement
    'hattrick-tooltip': HTMLHattrickTooltipElement
  }

  interface ElementTagNameMap {
    'hattrick-avatar': HTMLHattrickAvatarElement;
    'hattrick-bar': HTMLHattrickBarElement;
    'hattrick-flip': HTMLHattrickFlipElement;
    'hattrick-progress-arc': HTMLHattrickProgressArcElement;
    'hattrick-rating': HTMLHattrickRatingElement;
    'hattrick-timer': HTMLHattrickTimerElement;
    'hattrick-tooltip': HTMLHattrickTooltipElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;